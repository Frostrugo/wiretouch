class DataManager {
  // TODO: use less global variables
  Serial myPort;
  String fakeData;
  
  DataManager(Serial port) {
    if (port == null) {
      // use Armin's right hand
      fakeData = "0.8343418053122699,0.8259353356642282,0.8340055499933887,0.714840717020778,0.4776785028131065,0.23656596723914228,0.1583262009141589,0.11443869812784338,0.3612348462464465,0.17649044461033755,0.3045957555297806,0.9840992551927166,0.7966296636390803,0.9048537924658161,0.769978963593254,0.812880499814425,0.6567063429000882,0.8285804788111839,0.6643855722152848,0.4954785983338478,0.5460528957605373,0.20301730713140662,0.7602883899385292,0.8785413932762307,0.8924834591566329,0.7191945072106471,0.939220291517208,0.7486747899087667,0.8963906997465158,0.6726527292308586,0.7307203173966657,0.6490687009402755,0.44167020756398473,0.7228415751884549,0.8548787062524797,0.9443205080142922,0.6850437428147492,0.8622727852565198,0.6811321175441188,0.8558450025407809,0.5899625892907505,0.6477348357187711,0.5727284011551904,0.4222079878491814,0.6503858850569841,0.7826232069708552,0.8576729795007435,0.5755799336250579,0.5928017157087856,0.4411606922845076,0.30337935640231545,0.11513202793504682,0.25958044208808967,0.3004396906282727,0.2500193854765274,0.5990343460121841,0.7405342105695283,0.7783173962433402,0.4839695575649775,0.5138689803981226,0.2837151568377606,0.146102739595697,0.02848006290069046,0.1168151222034464,0.12643684034434835,0.17946972133335112,0.5608351958942948,0.7184788727855016,0.8942992368788399,0.5666057098890078,0.5884323761540231,0.2985116410069655,0.16976340469683557,0.03501851278660329,0.08910254914734933,0.024602890418446887,0.10596140083260126,0.5390629415573894,0.6786343297195282,0.8523137630888109,0.5993742814842654,0.47155485489472093,0.17611798390723363,0.10796454576197594,0.08013069276050638,0.03879591345384165,0.01108687112461194,0.10206309875094874,0.5593716175258325,0.6562970361629707,0.7761149519611084,0.5589078187865103,0.23219041250096295,0.052253483046399665,0.04524983160609918,0.016575180009943683,0.02111556449522677,0.009443674271884184,0.1287233590739677,0.5807681999371315,0.601486643880066,0.5275081104370792,0.24789382312233868,0.16234014048476025,0.03861571808222362,0.07632984119805673,0.021611259894994007,0.02296358050902578,0.05380207355428227,0.2032511907911097,0.6280199447569872,0.5686722588564139,0.26518820261288684,0.11402314794335121,0.13404323326168832,0.03103564882418189,0.08842810726512507,0.07590741968869051,0.09331294121026058,0.19777789215774416,0.3133065191357336,0.6708999234571252,0.640857102490867,0.6537294666998401,0.3843670818020556,0.178221808677695,0.0450283603826633,0.11925141338528371,0.0733921933366571,0.17633670642204197,0.29672833604551624,0.3910217558819612,0.7593178226141994,0.7343402985092667,0.7604686312366963,0.5277891151166199,0.33151210131575987,0.09579243158690867,0.48641396331757203,0.17900413727558914,0.31868163888577483,0.4437946427632867,0.5082938245312426,0.7487995724766507,0.7911172451970087,0.8634193262077715,0.6540792863339719,0.5771083693853045,0.29561101638883286,0.6032197240509428,0.5176962262365137,0.5037302633706687,0.5873329491057934,0.5835891302480818,0.8043883819917204,0.7893706293496946,0.8980091733509317,0.7269039850801807,0.6753485595216124,0.43339451892784286,0.717764356909895,0.6433794549485744,0.5268418574061638,0.5825785794183792,0.5268511604570952,0.7821236210727985,0.8089280122020046,0.8191657360720856,0.6858628866896314,0.45763339748055437,0.3012257841917665,0.46683475865214735,0.38201088797303934,0.4153312446923386,0.4048842222346992,0.42028398225881236";
      textInformation = "using fake data";
      averageSignalCounter=0;
    }
    else {
      println(Serial.list());
      this.myPort = port;
      this.myPort.clear(); // // do we need this? (cargo cult programming)
      if (bReadBinary) {
        // TODO: better encapsulation
        serBuffer = new byte[2 * horizontalWires * verticalWires];
        this.myPort.buffer(2 * horizontalWires * verticalWires);
        textInformation = "press 's' to start";
      }
      else {
        this.myPort.bufferUntil(32); // buffer everything until ASCII whitespace char triggers serialEvent()
      }
    }
  }
  
  int sb2ub(byte p) {
    return p < 0 ? 256+p : p;
  }
  
  void consumeSerialBuffer(Serial p) {
    p.readBytes(serBuffer);
    if (bUpdate) {
      for (int i = 0; i < verticalWires; i++) {
        for(int j = 0; j < horizontalWires; j++) {
           int sigPos = i*horizontalWires + j;
           int sig = ((sb2ub(serBuffer[2*sigPos])) << 8) | (sb2ub(serBuffer[2*sigPos+1]));
          
           // calculate the average signal strength for every crosspoint
           if (averageSignalCounter > 0) {
              crosspoints[i][j].accumulateAvgSig(sig);  
           } else {
              crosspoints[i][j].setSignalStrength(sig);
           }
         }
      }
      if (averageSignalCounter > 0) {
        averageSignalCounter--;
        textInformation = "calibrating: "+averageSignalCounter;
      }
    }
  }
  
  void parseData(String myString) {
    if (bUpdate) {
      myString = trim(myString);
      int data[] = int(split(myString,','));
      int k = 0;
      for (int i = 0; i < verticalWires; i++) {
        for(int j = 0; j < horizontalWires; j++) {
          if (averageSignalCounter > 0) {
            // calculate the average signal strength for every crosspoint
            // TODO: optimize
            crosspoints[i][j].accumulateAvgSig(data[k]);  
          } else {
            crosspoints[i][j].setSignalStrength(data[k]);
          }
          k++;
        }
      }
      if (averageSignalCounter > 0) {
        averageSignalCounter--;
        textInformation = "calibrating: "+averageSignalCounter;
      }
    }
  }
  
  void parseFakeData() {
    fakeData = trim(fakeData);
    float data[] = float(split(fakeData,','));
    int k = 0;
    for (int i = 0; i < verticalWires; i++) {
      for(int j = 0; j < horizontalWires; j++) {
        crosspoints[i][j].signalStrength = data[k];
        k++;
      }
    } 
  }
  
  void printData() {
     println("measured signals:");
     String myString = "";
     for (int i = 0; i < verticalWires; i++) {
        for(int j = 0; j < horizontalWires; j++) {
          myString = myString+(int) crosspoints[i][j].measuredSignal+",";
        }
     }
     println(myString);
     println("calculated signal strength:");
     myString = "";
     for (int i = 0; i < verticalWires; i++) {
        for(int j = 0; j < horizontalWires; j++) {
          myString = myString+crosspoints[i][j].signalStrength+",";
        }
     }
     println(myString);
  }
}

